#!/usr/bin/env node

const net = require('net')
const { handle_message, send_message, red } = require('./lib/helpers')
const SOCKET = "./bank.sock"

let connectedTellers = []
let connectedCustomers = []

// possible concept: customers and tellers might work in a single pool?
// will remove within next 3 commits if no movement
// let connectedClients = []

// TCP Server using a Unix socket

const server = net.createServer(conn => {
	console.log('client connected')


	handle_message(conn, message => {

		// customer connected?
		if (message === 'customer') {
			console.log('Customer connected')
			connectedCustomers.push(conn)
			console.log(connectedCustomers.length)
			// !Tellers connected
			if (!connectedTellers.length) {
				send_message(conn, `The Bank is ${red('closed')}.`)
			}
		}

		// Tellers connected
		else if (message === 'teller') {
			console.log('Teller connected')
			connectedTellers.push(conn)
		}

		// bank response still unchanged
		send_message(conn, `I, the Bank, received: ${message}`)
	})


	conn.on('close', () => {
		console.log('client disconnected')
	})
})










server.listen(SOCKET)
console.log(`Bank server is listening...`)


process.on('exit', shutdown)
process.on('SIGINT', shutdown)
process.on('SIGTERM', shutdown)

process.on('uncaughtException',function(err){
	console.log('Uncaught ERROR:', err)
})

function shutdown() {
	server.close()
	process.exit()
}
